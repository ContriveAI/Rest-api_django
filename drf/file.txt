###Serializer fuction
from rest_framework import serializers
from .models import Article

class ArticleSerializer(serializers.Serializer):
    title = serializers.CharField(max_length=100)
    name = serializers.CharField(max_length=100)
    author =serializers.CharField(max_length=100)
    email = serializers.EmailField(max_length=100)
    # date = serializers.DateTimeField()

    def create(self,validated_data):
        return Article.objects.create(validated_data)

    def update(self,instance,validated_data):
        instance.title = validated_data.get('title',instance.title)
        instance.author =validated_data.get('author',instance.author)
        instance.email = validated_data.get('email',instance.email)
        # instance.date = validated_dtaa.get('date',instance.date)
        instance.save()
        return instance


MODEL SERIALIZER METHHOD:
        @csrf_exempt
def article_deatail(request,pk):
    try:
        article = Article.objects.get(pk=pk)
    except ArticleDoesNotExist:
        return HttpResponse(status = 404)

    if request.method == 'GET':
        serializer = ArticleSerializer(article)
        
        return JsonResponse(serializer.data)

    elif request.method == 'PUT':
        data = JSONParser().parse(request)
        serializer = ArticleSerializer(article,data=data)
        if serializer.is_valid():
            serializer.save()
            return JsonResponse(serializer.data)
        return JsonResponse(serializer.error, status = 400)

    elif request.method == 'DELETE':
        article.delete()
        return HttpResponse(status=204)


        API views:::
        from django.shortcuts import render
from django.http import HttpResponse
from .models import Article
from django.http import HttpResponse,JsonResponse
from rest_framework.parsers import JSONParser
from .serializers import ArticleSerializer
from django.views.decorators.csrf import csrf_exempt
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework  import status
# Create your views here.
def index(request):
    return HttpResponse("Here's the text of the Web page.")

@api_view(['GET','POST'])
def article_list(request):
    if request.method == 'GET':
        articles = Article.objects.all()
        serializer = ArticleSerializer(articles,many =True)
        return Response(serializer.data)

    elif request.method == 'POST':
        # data = JSONParser().parse(request)
        serializer = ArticleSerializer(data= request.data)

        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data,status = status.HTTP_201_CREATED)
        return Response(serializer.error, status = status.HTTP_400_BAD_REQUEST)

@api_view(['GET','PUT','DELETE'])

def article_detail(request,pk):
    try:
        article = Article.objects.get(pk= pk)
    except ArticleDoesNotExist:
        return Response(status =status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = ArticleSerializer(article)
        
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = ArticleSerializer(article,data= request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.error, status =status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        article.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


def index(request):
    return HttpResponse("Here's the text of the Web page.")

@api_view(['GET','POST'])
def article_list(request):
    if request.method == 'GET':
        articles = Article.objects.all()
        serializer = ArticleSerializer(articles,many =True)
        return Response(serializer.data)

    elif request.method == 'POST':
        # data = JSONParser().parse(request)
        serializer = ArticleSerializer(data= request.data)

        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data,status = status.HTTP_201_CREATED)
        return Response(serializer.error, status = status.HTTP_400_BAD_REQUEST)

@api_view(['GET','PUT','DELETE'])

def article_detail(request,pk):
    try:
        article = Article.objects.get(pk= pk)
    except ArticleDoesNotExist:
        return Response(status =status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = ArticleSerializer(article)
        
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = ArticleSerializer(article,data= request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.error, status =status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        article.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
